#include <stdio.h>

#define MEMORY_SIZE 1000

struct MemoryBlock {
    int start;
    int size;
    int allocated;
};

void initializeMemory(struct MemoryBlock memory[], int size) {
    memory[0].start = 0;
    memory[0].size = size;
    memory[0].allocated = 0;
}

void worstFit(struct MemoryBlock memory[], int numBlocks, int requestSize) {
    // Find the worst-fit block
    int worstFitIndex = -1;
    for (int i = 0; i < numBlocks; i++) {
        if (!memory[i].allocated && memory[i].size >= requestSize) {
            if (worstFitIndex == -1 || memory[i].size > memory[worstFitIndex].size) {
                worstFitIndex = i;
            }
        }
    }

    if (worstFitIndex != -1) {
        memory[worstFitIndex].allocated = 1;
        printf("Allocated %d units of memory at index %d using Worst-Fit\n", requestSize, worstFitIndex);
    } else {
        printf("Memory request of %d units couldn't be allocated using Worst-Fit\n", requestSize);
    }
}

void bestFit(struct MemoryBlock memory[], int numBlocks, int requestSize) {
    // Find the best-fit block
    int bestFitIndex = -1;
    for (int i = 0; i < numBlocks; i++) {
        if (!memory[i].allocated && memory[i].size >= requestSize) {
            if (bestFitIndex == -1 || memory[i].size < memory[bestFitIndex].size) {
                bestFitIndex = i;
            }
        }
    }

    if (bestFitIndex != -1) {
        memory[bestFitIndex].allocated = 1;
        printf("Allocated %d units of memory at index %d using Best-Fit\n", requestSize, bestFitIndex);
    } else {
        printf("Memory request of %d units couldn't be allocated using Best-Fit\n", requestSize);
    }
}

void firstFit(struct MemoryBlock memory[], int numBlocks, int requestSize) {
    for (int i = 0; i < numBlocks; i++) {
        if (!memory[i].allocated && memory[i].size >= requestSize) {
            memory[i].allocated = 1;
            printf("Allocated %d units of memory at index %d using First-Fit\n", requestSize, i);
            return;
        }
    }
    printf("Memory request of %d units couldn't be allocated using First-Fit\n", requestSize);
}

int main() {
    struct MemoryBlock memory[5];

    initializeMemory(memory, MEMORY_SIZE);

    // Simulate memory requests
    worstFit(memory, 5, 200);
    bestFit(memory, 5, 300);
    firstFit(memory, 5, 150);
    worstFit(memory, 5, 100);

    return 0;
}
