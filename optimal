#include <stdio.h>

#define NUM_FRAMES 3
#define NUM_PAGES 12
#define MAX_DISTANCE 9999

void printFrames(int frames[], int numFrames) {
    for (int i = 0; i < numFrames; i++) {
        if (frames[i] == -1) {
            printf(" -");
        } else {
            printf(" %d", frames[i]);
        }
    }
    printf("\n");
}

int isPagePresent(int frames[], int numFrames, int page) {
    for (int i = 0; i < numFrames; i++) {
        if (frames[i] == page) {
            return 1;
        }
    }
    return 0;
}

int findOptimalIndex(int frames[], int numFrames, int reference[], int currentIndex) {
    int optimalIndex = -1;
    int maxDistance = -1;

    for (int i = 0; i < numFrames; i++) {
        int frame = frames[i];
        int j;
        for (j = currentIndex + 1; j < NUM_PAGES; j++) {
            if (reference[j] == frame) {
                break;
            }
        }

        if (j == NUM_PAGES) {
            return i; // If a page won't be used in the future, replace it
        }

        if (j > maxDistance) {
            maxDistance = j;
            optimalIndex = i;
        }
    }

    return optimalIndex;
}

int main() {
    int referenceString[NUM_PAGES] = {0, 1, 2, 3, 0, 1, 4, 0, 1, 2, 3, 4};
    int frames[NUM_FRAMES];
    int pageFaults = 0;

    // Initialize frames with -1 to indicate empty
    for (int i = 0; i < NUM_FRAMES; i++) {
        frames[i] = -1;
    }

    for (int i = 0; i < NUM_PAGES; i++) {
        int currentPage = referenceString[i];
        printf("Page %d: ", currentPage);

        if (!isPagePresent(frames, NUM_FRAMES, currentPage)) {
            if (frames[NUM_FRAMES - 1] == -1) {
                // If there is an empty frame, use it
                int emptyFrameIdx = 0;
                while (frames[emptyFrameIdx] != -1) {
                    emptyFrameIdx++;
                }
                frames[emptyFrameIdx] = currentPage;
            } else {
                // Find the page to be used farthest in the future and replace it
                int optimalIndex = findOptimalIndex(frames, NUM_FRAMES, referenceString, i);
                frames[optimalIndex] = currentPage;
            }
            pageFaults++;
            printf("Page Fault! ");
        }

        printFrames(frames, NUM_FRAMES);
    }

    printf("Total page faults (Optimal): %d\n", pageFaults);

    return 0;
}
